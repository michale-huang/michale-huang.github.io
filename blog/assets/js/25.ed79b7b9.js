(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{371:function(t,a,r){"use strict";r.r(a);var s=r(43),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"微前端架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#微前端架构"}},[t._v("#")]),t._v(" 微前端架构")]),t._v(" "),r("h2",{attrs:{id:"概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),r("blockquote",[r("p",[t._v("微前端架构是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将Web应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。这些小型的前端应用可以独立运行、独立开发、独立部署。同时，它们可以在共享组件的同时,进行并行开发——这些组件可以通过 NPM 或者 Git Tag、Git Submodule 来管理。")])]),t._v(" "),r("h2",{attrs:{id:"美团微前端架构案例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#美团微前端架构案例"}},[t._v("#")]),t._v(" 美团微前端架构案例")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://tech.meituan.com/fe_tiny_spa.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("美团"),r("OutboundLink")],1),t._v("\n采用微前端的方式合并多个独立的单页应用，实现类单页应用的聚合应用。")]),t._v(" "),r("p",[t._v("在这个微前端的方案里，有几个我们必须要解决的问题：")]),t._v(" "),r("ul",[r("li",[t._v("一个前端需要对应多个后端")]),t._v(" "),r("li",[t._v("提供一套应用注册机制，完成应用的无缝整合")]),t._v(" "),r("li",[t._v("构建时集成应用和应用独立发布部署")])]),t._v(" "),r("p",[t._v("(微前端／大前端)[https://github.com/wxyyxc1992/Web-Series/blob/master/%E5%AF%BC%E8%AE%BA/%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B8%8E%E5%A4%A7%E5%89%8D%E7%AB%AF.md]")]),t._v(" "),r("h2",{attrs:{id:"设计理念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计理念"}},[t._v("#")]),t._v(" 设计理念")]),t._v(" "),r("h3",{attrs:{id:"中心化路由"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#中心化路由"}},[t._v("#")]),t._v(" 中心化路由")]),t._v(" "),r("p",[t._v("对于一个微服务来说，它需要一个服务注册中心：服务提供方要注册通告服务地址，服务的调用方要能发现目标服务。")]),t._v(" "),r("p",[t._v("而对于一个前端应用来说，这个东西就是路由。")]),t._v(" "),r("h3",{attrs:{id:"标示化应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#标示化应用"}},[t._v("#")]),t._v(" 标示化应用")]),t._v(" "),r("p",[t._v("每个应用，等同于业务之间的沟通结构块，应是独立且唯一的。每个应用都应有一个唯一的标示。")]),t._v(" "),r("h3",{attrs:{id:"生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),r("p",[t._v("Single-SPA 设计了一个基本的生命周期（虽然它没有统一管理），它包含了五种状态：")]),t._v(" "),r("p",[t._v("load，决定加载哪个应用，并绑定生命周期\nbootstrap，获取静态资源\nmount，安装应用，如创建 DOM 节点\nunload，删除应用的生命周期\nunmount，卸载应用，如删除 DOM 节点")]),t._v(" "),r("p",[t._v("以上都是需要考虑的点")]),t._v(" "),r("h3",{attrs:{id:"独立部署与配置自动化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#独立部署与配置自动化"}},[t._v("#")]),t._v(" 独立部署与配置自动化")]),t._v(" "),r("p",[t._v("主工程在运行的时候，会去服务器获取最新的应用配置。\n主工程在获取到配置后，将一一创建应用，并为应用绑定生命周期。\n当主工程监测到路由变化的时候，将寻找是否有对应的路由匹配到应用。\n当匹配对对应应用时，则加载相应的应用。")]),t._v(" "),r("p",[t._v("路由分发式微前端，即通过路由将不同的业务分发到不同的独立前端应用上。")])])}),[],!1,null,null,null);a.default=e.exports}}]);